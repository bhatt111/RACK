% Copyright (c) 2020, General Electric Company and Galois, Inc.
:- multifile data_instance/4, data_get/4.

databin_name(MyName) :-
    append_fld('v0.8', ingest_databin, MyName).

% These are the various facts that might be emitted by the databin
% wrappers that will be recognized here.

:- discontiguous tar_access/3,
                 tar_start/3,
                 tar_finished/3,
                 build_with/5,
                 build_inputs/2,
                 build_outputs/2,
                 build_from/2,
                 build_start/2,
                 build_finished/3,
                 build_user/2,
                 file_sha1/3.

%% Recognizers for matching tool output data

% -- This ingestion activity

data_instance('PROV-S#ACTIVITY', % create an instance of this
              load_data_start,   % on this event (starting ingestion)
              MyName,            % output name
              [uid(MyName),ingesting_data(StartTime)]   % output attributes ot match data_get operations
             ) :-
    databin_name(MyName),
    get_time(TS), stamp_date_time(TS, date(_Y,Mo,D,H,Min,S,UTCOff,_TZName,_DST), local),
    StartTime = date_time(1999,Mo,D,H,Min,S,UTCOff).
data_instance('PROV-S#ACTIVITY', load_data_finish, MyName, ingested_data(EndTime)) :-
    databin_name(MyName),
    get_time(TS), stamp_date_time(TS, date(Y,Mo,D,H,Min,S,UTCOff,_TZName,_DST), local),
    EndTime = date_time(Y,Mo,D,H,Min,S,UTCOff).
data_get('PROV-S#ACTIVITY',         % for an instance of this
         'PROV-S#startedAtTime',    % if this relation exists
         ingesting_data(StartTime), % and this attribute is available from a data_instance
         StartTime                  % then generate this value (here, an owl date_time atom)
        ).
data_get('PROV-S#ACTIVITY', 'PROV-S#wasInformedBy', ingesting_data(_), ModelName) :-
    rack_model_name(ModelName).
data_get('PROV-S#ACTIVITY', 'PROV-S#endedAtTime', ingested_data(EndTime), EndTime).

%% -------------------- TAR FILES

data_instance('FILE#FILE', load_data, Instance,
              [ uid(Instance), sw_file_data(Nonce, Dir, File) ]) :-
    tar_access(Nonce, File, create),
    build_from(Nonce, Dir),
    file_instance(Nonce, Dir, File, Instance).

data_instance('FILE#FILE', load_data, Instance,
              [ uid(Instance), sw_file_data(Nonce, Dir, File) ]) :-
    tar_access(Nonce, File, open),
    build_from(Nonce, Dir),
    file_instance(Nonce, Dir, File, Instance).

data_get('FILE#FILE', 'FILE#fileFormat',
         sw_file_data(Nonce, _, File), 'TarFile') :-
    tar_access(Nonce, File, create).

data_instance('SOFTWARE#PACKAGE', load_data, Instance,
              [ uid(Instance), package_tar(Nonce) ]) :-
    tar_access(Nonce, _, create),
    activity_instance(Nonce, tar, Instance).

data_get('SOFTWARE#PACKAGE', 'SOFTWARE#packagedBy', package_tar(N), ToolPath) :-
    tar_start(N, _, ToolPath).

data_get('SOFTWARE#PACKAGE', 'SOFTWARE#packageInput', package_tar(Nonce), V) :-
    tar_access(Nonce, File, open),
    build_from(Nonce, Dir),
    file_instance(Nonce, Dir, File, V).

data_get(_, 'PROV-S#startedAtTime', package_tar(N), T) :- tar_start(N, T, _).
data_get(_, 'PROV-S#endedAtTime', package_tar(N), T) :- tar_finished(N, T, _).

data_instance('FILE#FILE', load_data, TarPath,
              [uid(TarPath), sw_file_data(Nonce, '/tmp', TarPath)]) :-
    tar_start(Nonce, _, TarPath).

data_get('FILE#FILE', 'FILE#createBy', sw_file_data(Nonce, Dir, File), V) :-
    tar_access(Nonce, File, create),
    build_from(Nonce, Dir),
    activity_instance(Nonce, tar, V).

data_get('SOFTWARE#BUILD', 'SOFTWARE#step',
         activity_data(build_with(BuildNonce, _, _, _, _),_,_), V) :-
    build_step(BuildNonce, N),
    tar_start(N, _, _),
    activity_instance(N, tar, V).


%% -------------------- MISC FILES

file_instance(Nonce, _, Input, InstanceRef) :-
    (file_sha1(Input, SHA1, Nonce), !, append_fld(SHA1, Input, InstanceRef);
     atom_string(IA, Input), file_sha1(IA, SHA1, Nonce), !, append_fld(SHA1, IA, InstanceRef);
     append_fld(Nonce, Input, InstanceRef)).

data_instance('FILE#FILE', load_data, Instance, InstanceData) :-
    build_inputs(Nonce, Inputs),
    build_from(Nonce, Dir),
    member(Input, Inputs),
    file_instance(Nonce, Dir, Input, Instance),
    InstanceData = [uid(Instance), sw_file_data(Nonce, Dir, Input)].

data_instance('FILE#FILE', load_data, Instance, InstanceData) :-
    build_outputs(Nonce, Outputs),
    build_from(Nonce, Dir),
    member(Output, Outputs),
    file_instance(Nonce, Dir, Output, Instance),
    InstanceData = [uid(Instance), sw_file_data(Nonce, Dir, Output)].

data_instance('FILE#FILE', load_data, ToolPath,
              [uid(UID), sw_file_data(Nonce, '/tmp', ToolPath)]) :-
    build_with(Nonce, _ToolType, _ToolName, ToolPath, _ToolArgs),
    UID = ToolPath.

data_get('FILE#FILE', 'FILE#fileFormat',
         sw_file_data(Nonce, _, F), 'CSourceFile') :-
    build_inputs(Nonce, FS),
    member(F, FS),
    build_with(Nonce, compile, _, _, _),
    % now make sure this wasn't an output of a previous build step
    % (e.g. a .o object file)
    build_from(Nonce, Dir),
    \+ output_of(compile, Dir, F, _).

output_of(Tool, Dir, F, BuildNonce) :-
    % File F in dir Dir might be the output of a previous build (if
    % so, report the BuildNonce).  The Tool might be specified as a
    % restriction, or it might also be an output.
    build_from(BuildNonce, Dir),
    build_with(BuildNonce, Tool, _, _, _),
    build_outputs(BuildNonce, FS),
    member(F, FS), !.  % red cut
output_of(_, _, _, _) :- false.  % base case for checkout output_of

data_get('FILE#FILE', 'FILE#fileFormat',
         sw_file_data(Nonce, _, F), 'ElfFile') :-
    build_outputs(Nonce, FS),
    member(F, FS),
    build_with(Nonce, compile, _, _, _).

data_get('FILE#FILE', 'FILE#createBy', sw_file_data(Nonce, _, F), V) :-
    build_outputs(Nonce, FS),
    member(F, FS),
    build_with(Nonce, ToolType, _ToolName, _ToolPath, _ToolArgs),
    append_fld(Nonce, ToolType, V).

data_get('FILE#FILE', 'FILE#fileHash', uid(FileInstance), FileHashRef) :-
    file_sha1(FName, _SHA1, Nonce),
    file_instance(Nonce, _, FName, FileInstance),
    append_fld(FileInstance, 'hash', FileHashRef).

data_instance('FILE#FILE_HASH', generated_from(FileInstance), Instance,
              [uid(Instance), file_hash(FName, SHA1)]) :-
    file_sha1(FName, SHA1, Nonce),
    build_from(Nonce, Dir),
    file_instance(Nonce, Dir, FName, FileInstance),
    append_fld(FileInstance, 'hash', Instance).
data_get('FILE#FILE_HASH', 'FILE#hashType', file_hash(_, Hash), HashRef) :-
    file_sha1(_, Hash, _),
    rack_ref('FILE#SHA1', HashRef).
data_get('FILE#FILE_HASH', 'FILE#hashValue', file_hash(_, Hash), HashStr) :-
    atom_string(Hash, HashStr).
data_get('FILE#FILE_HASH', 'PROV-S#title', file_hash(FName, _), Title) :-
    atom_string(FName, FNameStr),
    string_concat(FNameStr, " hash", Title).
data_get('FILE#FILE_HASH', 'PROV-S#description', file_hash(FName, Hash), Description) :-
    atom_string(FName, FNameStr),
    file_sha1(FName, Hash, _),
    string_concat(FNameStr, " SHA1 hash value of file contents", Description).

%% -- Formats ------------------------------

data_instance('FILE#FORMAT', load_data, F, [uid(F), fmt(F)]) :-
    member(F, [ 'CSourceFile', 'ElfFile', 'TarFile', 'ArchiveFile' ]).

data_get('FILE#FORMAT', 'PROV-S#title', fmt('CSourceFile'), "C-source").
data_get('FILE#FORMAT', 'PROV-S#description', fmt('CSourceFile'), "Compileable source written in the C language").

data_get('FILE#FORMAT', 'PROV-S#title', fmt('ElfFile'), "object/executable").
data_get('FILE#FORMAT', 'PROV-S#description', fmt('ElfFile'), "Binary object or executable").

data_get('FILE#FORMAT', 'PROV-S#title', fmt('TarFile'), "archive:tar").
data_get('FILE#FORMAT', 'PROV-S#description', fmt('TarFile'), "Multi-file archive format (TAR)").

data_get('FILE#FORMAT', 'PROV-S#title', fmt('ArchiveFile'), "archive:library").
data_get('FILE#FORMAT', 'PROV-S#description', fmt('ArchiveFile'), "Multi-file library archive format (AR)").

%% -- Activities ------------------------------

activity_instance(Nonce, ToolType, InstanceName) :-
    append_fld(Nonce, ToolType, InstanceName).

%% -------------------- COMPILE

data_instance('SOFTWARE#COMPILE', load_data, Instance,
              [ uid(Instance), activity_data(BW,BS,BF) ]) :-
    BW = build_with(Nonce, compile, _ToolName, _ToolPath, _ToolArgs),  % compile tool
    BS = build_start(Nonce, _StartTime),
    BF = build_finished(Nonce, _FinishTime, _ExitVal),
    BW, BS, BF,
    activity_instance(Nonce, compile, Instance).

data_get('SOFTWARE#COMPILE', 'SOFTWARE#compiledBy',
         activity_data(build_with(_, compile, _, ToolPath, _),_,_),
         ToolPath).
data_get('SOFTWARE#COMPILE', 'PROV-S#wasAssociatedWith',
         activity_data(_,build_start(N,_),_),
         UserInstance) :-
    build_user(N, UserName),
    user_instance_name(UserName, UserInstance).
data_get('SOFTWARE#COMPILE', 'SOFTWARE#performedBy',
         activity_data(_,build_start(N,_),_),
         UserInstance) :-
    build_user(N, UserName),
    user_instance_name(UserName, UserInstance).

%% -------------------- MAKE

data_instance('SOFTWARE#BUILD', load_data, Instance,
              [ uid(Instance), activity_data(BW,BS,BF) ]) :-
    BW = build_with(Nonce, make, _ToolName, _ToolPath, _ToolArgs),   % make tool
    BS = build_start(Nonce, _StartTime),
    BF = build_finished(Nonce, _FinishTime, _ExitVal),
    BW, BS, BF,
    activity_instance(Nonce, make, Instance).

data_get('SOFTWARE#BUILD', 'SOFTWARE#step',
         activity_data(build_with(BuildNonce, _, _, _, _),_,_), V) :-
    build_with(BuildNonce, _, _, _, _),
    build_with(ToolNonce, ToolType, _, _, _),
    build_step(BuildNonce, ToolNonce),
    activity_instance(ToolNonce, ToolType, V).

data_get(_, 'PROV-S#wasInformedBy', activity_data(build_with(ToolNonce, ToolType,_,_,_),_,_), MakeInstance) :-
    build_with(MakeNonce, make, _, _, _),
    build_with(ToolNonce, ToolType, _, _, _),
    build_step(MakeNonce, ToolNonce),
    activity_instance(MakeNonce, make, MakeInstance).

data_instance('PROV-S#ACTIVITY', load_data, Instance,
              [ uid(Instance), activity_data(BW,BS,BF) ]) :-
    BW = build_with(Nonce, ToolType, _ToolName, _ToolPath, _ToolArgs),
    BS = build_start(Nonce, _StartTime),
    BF = build_finished(Nonce, _FinishTime, _ExitVal),
    BW, BS, BF,
    ToolType \= compile,
    ToolType \= make,
    activity_instance(Nonce, ToolType, Instance).

data_instance('PROV-S#AGENT', load_data, Instance, [ activity_data(user_instance(BU, Instance)) ]) :-
    BU = build_user(_Nonce, UserName),
    BU,
    user_instance_name(UserName, Instance).
user_instance_name(UserName, Instance) :- append_fld('User', UserName, Instance).
data_get(_, 'PROV-S#identifier', activity_data(user_instance(build_user(_,User),_)), UserStr) :-
    atom_string(User, UserStr).
data_get(_, 'PROV-S#title', activity_data(user_instance(_,_)), "Username").
data_get(_, 'PROV-S#description', activity_data(user_instance(_,_)), "The username of the user agent").
data_get(_, 'PROV-S#wasAssociatedWith', activity_data(_,build_start(N,_),_), UserInstance) :-
    build_user(N, UserName),
    user_instance_name(UserName, UserInstance).


data_get(_, 'PROV-S#startedAtTime', activity_data(_,build_start(_,T),_), T).
data_get(_, 'PROV-S#endedAtTime', activity_data(_,_,build_finished(_,T,_)), T).
data_get(_, 'PROV-S#dataInsertedBy', _, MyName) :- databin_name(MyName).

