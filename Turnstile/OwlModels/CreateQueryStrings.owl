<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:builtinfunctions="http://sadl.org/builtinfunctions#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns="http://Turnstile/CreateQueryStrings#"
    xmlns:sadlimplicitmodel="http://sadl.org/sadlimplicitmodel#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:sadlbasemodel="http://sadl.org/sadlbasemodel#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
  xml:base="http://Turnstile/CreateQueryStrings">
  <owl:Ontology rdf:about="">
    <owl:imports rdf:resource="PropertyDefinitionInference"/>
    <owl:imports rdf:resource="http://sadl.org/builtinfunctions"/>
    <owl:imports rdf:resource="http://sadl.org/sadlimplicitmodel"/>
    <owl:imports rdf:resource="http://sadl.org/sadlbasemodel"/>
    <rdfs:comment xml:lang="en">This ontology was created from a SADL file 'CreateQueryStrings.sadl' and should not be directly edited.</rdfs:comment>
  </owl:Ontology>
  <sadlimplicitmodel:NamedQuery rdf:ID="GenQueryString1">
    <rdfs:isDefinedBy>select ?QueryStr where 		# depending on how we automates, we may not need to output ?ClassType
{
  {select distinct ?ClassName ?ClassProp ?Class (group_concat(distinct ?temp2; separator='} . OPTIONAL{') as ?PropList) where
    {  ?ClassProp &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://Turnstile/PropertyDefinitionInference#ClassProp&gt; 
     . ?ClassProp &lt;http://Turnstile/PropertyDefinitionInference#className&gt; ?Class 												# e.g. ?Class is http://arcos.rack/SYSTEM#SYSTEM for which we want all properties 
     . Let (?ClassVarInt := replace(str(?Class),'http.*#','?')) 					# making a variable (e.g. ?SYSTEM)
     . ?ClassProp &lt;http://Turnstile/PropertyDefinitionInference#propName&gt; ?PropName 		# ?PropName is the property
     . LET (?VarNameInt := replace(str(?PropName),'http.*#','&gt; ?')) 				# replace initial part of property with a ? to make it a variable in query (e.g. &gt; ?producedBy)
     . LET (?temp1 := concat(str(?PropName),str(?VarNameInt)))						# e.g. http://arcos.rack/SYSTEM#producedBy&gt; ?producedBy
     . LET (?temp2 := concat(concat(?ClassVarInt,' &lt;'),?temp1))						# e.g. ?SYSTEM &lt;http://arcos.rack/SYSTEM#producedBy&gt; ?producedBy
    } group by ?ClassName ?ClassProp ?Class
  }
  . LET (?ClassType := replace(str(?Class),'http.*#',''))							# strip out; only using it to then generate eventual csv file name
  . LET (?ClassVar := replace(str(?Class),'http.*#','?')) 							# making a variable (e.g. ?SYSTEM)
  . LET (?str0 := 'zzzWrite: data {Ask: yyyselect * where {')  						# first part of query string
  . LET (?str1 := concat(str(?ClassVar), ' &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;')) 							# putting together the first clause of the form ?SYSTEM &lt;rdf:type&gt; &lt;http://arcos.rack/SYSTEM#SYSTEM&gt;
  . LET (?str2 := concat(?str1,replace(str(?Class),'http.*#','')))
  . LET (?str4 := concat(?str2,'&gt; . OPTIONAL{'))
  . LET (?str5 := concat(?str0,?str4))												# the first clause is in along with first OPTIONAL fragment
  . LET (?str6 := concat(?str5, ?PropList))											# all the properties in the query string
  . LET (?str7 := concat(?str6,'}}yyy.} to yyyData/'))				
  . LET (?QueryStr := concat(?str7, concat(str(?ClassType),'.csvyyy.zzz')))			# end the query string
} order by ?QueryStr</rdfs:isDefinedBy>
  </sadlimplicitmodel:NamedQuery>
</rdf:RDF>
