// Copyright (c) 2020, General Electric Company and Galois, Inc.
uri "http://arcos.rack/REQUIREMENTS" alias Rq.
import "http://arcos.rack/PROV-S".

REQUIREMENT
	(note "Captures (both high- and low-level) properties of a process or artifact that are to be assessed")
	is a type of ENTITY.

	text (note "Description of the REQUIREMENT") describes REQUIREMENT with values of type string.
	// The "text" string can optionally be subdivided into sub-parts : givenText, ifText, thenText
	// This corresponds to how rules are defined in SADL and note that in a SADL rule whatever is in
	// givenText can simply be included in the ifText part.
	// Note that modulo naming changes this structure also matches the structure
	// that GrammaTech had which was : Given, When, Then parts.
	// The structure of requirements in ASSERT subsume this structure of requirements. 
	givenText (note "optional part that can be used to set certain conditions apart from other conditions in the ifText part") describes REQUIREMENT with values of type string.
	ifText (note "conditions under which this requirement holds") describes REQUIREMENT with values of type string.
	thenText (note "specifies what should hold by this requirement if the requirement conditions are met") describes REQUIREMENT with values of type string.

	governs (note "ENTITY(s) that are the subject of the requirement") describes REQUIREMENT with values of type ENTITY.
	governs is a type of wasDerivedFrom.

	satisfies (note "Parent ENTITY(s) (e.g. REQUIREMENT) that this REQUIREMENT is derived from") describes REQUIREMENT with values of type ENTITY.
	satisfies is a type of wasDerivedFrom.

	mitigates (note "ENTITY(s) (e.g. HAZARD) that is being mitigated by this REQUIREMENT") describes REQUIREMENT with values of type ENTITY.
	mitigates is a type of wasDerivedFrom.

	createdBy (note "ACTIVITY(s) (e.g. REQUIREMENT_DEVELOPMENT) that created this REQUIREMENT") describes REQUIREMENT with values of type ACTIVITY.
	createdBy is a type of wasGeneratedBy.


DATA_DICTIONARY_TERM
	(note "Defines some conceptual data that may be collected somewhere and used somewhere else")
	is a type of ENTITY.

	text (note "Description of the term") describes DATA_DICTIONARY_TERM with values of type string.

	providedBy (note "ENTITY(s) (e.g. REQUIREMENT) that provides this information") describes DATA_DICTIONARY_TERM with values of type ENTITY.
	providedBy is a type of wasDerivedFrom.

	consumedBy (note "ENTITY(s) (e.g. REQUIREMENT) that consumes this information") describes DATA_DICTIONARY_TERM with values of type ENTITY.
	consumedBy is a type of wasDerivedFrom.

	createdBy (note "ACTIVITY(s) (e.g. REQUIREMENT_DEVELOPMENT) that created this data dictionary term") describes DATA_DICTIONARY_TERM with values of type ACTIVITY.
	createdBy is a type of wasGeneratedBy.


REQUIREMENT_DEVELOPMENT
	(note "ACTIVITY that produces REQUIREMENTs")
	is a type of ACTIVITY.

	author (note "AGENT(s) responsible for producing a REQUIREMENT") describes REQUIREMENT_DEVELOPMENT with values of type AGENT.
	author is a type of wasAssociatedWith.

	referenced (note "Source materials (requirement and design docs) used during development") describes REQUIREMENT_DEVELOPMENT with values of type ENTITY.
	referenced is a type of used.

	governedBy (note "ENTITY(s) (e.g. REQUIREMENTS, any sort of document) used during this ACTIVITY") describes REQUIREMENT_DEVELOPMENT with values of type ENTITY.
	governedBy is a type of used.
