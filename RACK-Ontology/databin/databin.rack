:- multifile data_instance/4, data_get/4.

% These are the various facts that might be emitted by the databin
% wrappers that will be recognized here.

:- discontiguous tar_access/3,
                 build_inputs/2,
                 build_outputs/2,
                 build_from/2.

%% Recognizers for matching tool output data

data_instance('SOFTWARE#FILE', load_data, File, createdFile(File, tar)) :-
    tar_access(_Nonce, File, create).

%%

data_instance('SOFTWARE#FILE', load_data, Instance, InstanceData) :-
    build_inputs(Nonce, Inputs),
    build_from(Nonce, Dir),
    member(Input, Inputs),
    input_or_prev_output(Nonce, Dir, Input, Instance),
    InstanceData = sw_file_data(Nonce, Dir, Input).
input_or_prev_output(_Nonce, Dir, Input, InstanceRef) :-
    % This file is an input, but was it an output of a previous operation?
    output_of(_AnyTool, Dir, Input, BuildNonce), !,
    append_fld(BuildNonce, Input, InstanceRef).
input_or_prev_output(Nonce, _, Input, InstanceRef) :-
    % The above failed so file was not an output of a previous build.
    % It was probably created by a user, so it's a new, distinct file.
    append_fld(Nonce, Input, InstanceRef).

data_instance('SOFTWARE#FILE', load_data, Instance, InstanceData) :-
    build_outputs(Nonce, Outputs),
    build_from(Nonce, Dir),
    member(Output, Outputs),
    append_fld(Nonce, Output, Instance),
    InstanceData = sw_file_data(Nonce, Dir, Output).

data_instance('SOFTWARE#FILE', load_data, ToolPath,
              sw_file_data(Nonce, '/tmp', ToolPath)) :-
    build_with(Nonce, _ToolType, _ToolName, ToolPath, _ToolArgs).

data_get('SOFTWARE#FILE', 'SOFTWARE#filename', createdFile(File, tar), Value) :-
    atom_string(File, Value).

data_get('SOFTWARE#FILE', 'SOFTWARE#fileFormat',
         sw_file_data(Nonce, _, F), 'CSourceFile') :-
    build_inputs(Nonce, FS),
    member(F, FS),
    build_with(Nonce, compile, _, _, _),
    % now make sure this wasn't an output of a previous build step
    % (e.g. a .o object file)
    build_from(Nonce, Dir),
    \+ output_of(compile, Dir, F, _).

output_of(Tool, Dir, F, BuildNonce) :-
    % File F in dir Dir might be the output of a previous build (if
    % so, report the BuildNonce).  The Tool might be specified as a
    % restriction, or it might also be an output.
    build_from(BuildNonce, Dir),
    build_with(BuildNonce, Tool, _, _, _),
    build_outputs(BuildNonce, FS),
    member(F, FS), !.  % red cut
output_of(_, _, _, _) :- false.  % base case for checkout output_of

data_get('SOFTWARE#FILE', 'SOFTWARE#fileFormat',
         sw_file_data(Nonce, _, F), 'ElfFile') :-
    build_outputs(Nonce, FS),
    member(F, FS),
    build_with(Nonce, compile, _, _, _).


data_instance('SOFTWARE#FORMAT', load_data, F, F) :-
    member(F, [ 'CSourceFile', 'ElfFile' ]).
data_get('SOFTWARE#FORMAT', 'PROV-S#uniqueIdentifier', Fmt, FmtS) :-
    atom_string(Fmt, FmtS).
