#!/usr/bin/env bash

# TODO: use -M for internal assist of include files
# TODO: get -L paths and -l libraries

. $(dirname $0)/rackfuncs.sh

inf=()
outf=''
inclf=''
opts=()

outnxt=0
inclnxt=0
ignnxt=0
declare -a extra

for ARG ; do
    case ${ARG} in
        -o) outnxt=1 ;;
        -MF) inclnxt=1 ;;
        -MT) ignnxt=1 ;;
        *) if (( $outnxt )) ; then
               outf="${ARG}"
               outnxt=0
           elif (( $inclnxt )) ; then
               inclf="${ARG}"
               inclnxt=0
           elif (( $ignnxt )) ; then
               ignnxt=0
           elif [ -r ${ARG} ] ; then
               inf+=("${ARG}")
           else
               opts+=("${ARG}")
           fi
           ;;
    esac
done

tool=$(basename $0)
realtool=$(find_in_path_remainder $tool)

if [ -z "${inf}" ] ; then
    # Sometimes things like "gcc --version" is run by configure or
    # other tools to do other things than actually compile, so just
    # execute these without recording rack information.
    $realtool ${*}
    exit $?
fi

outf="${outf:-$(basename $inf .c).o}"
if [ -z "${inclf}" ] ; then
    inclf="$(dirname ${inf})/.$(basename ${inf} .c).d"
    extra+=("-MMD" "-MF" "$inclf")
fi
rackf="$(dirname ${outf})/.$(basename ${outf}).rack"
nonce="n$(date +%s)-$$"

(
    export IFS=","
    echo ":- multifile build_with/5, build_from/2, build_inputs/2, build_outputs/2, build_start/2, build_finished/3."
    echo "build_with(${nonce@Q}, compile," ${tool@Q}, ${realtool@Q}, [ "${opts[*]@Q}" ] ")."
    echo "build_from(${nonce@Q}, '"$(top_rel_curdir)"')."
    echo "build_inputs(${nonce@Q}, [ ${inf[*]@Q} ])."
    echo "build_outputs(${nonce@Q}, [ ${outf@Q} ])."
    echo "build_start(${nonce@Q}, $(date +'date_time(%Y,%m,%d,%H,%M,%S,%z)'))."
) > ${rackf}

update_make_steps

when_done() {
    rval=$?
    if [ ! -z $inclf -a -r $inclf ] ; then
        read -a fl < <(cat $inclf)
        unset fl[0]  # remove output file
        IFS=","
        echo "build_inputs(${nonce@Q}, [ ${fl[*]@Q} ])." >> ${rackf}
    fi
    echo "build_finished(${nonce@Q}, $(date +'date_time(%Y,%m,%d,%H,%M,%S,%z)'), $rval)." >> ${rackf}
}
trap when_done EXIT

$realtool ${*} ${extra[*]}
