#!/usr/bin/env python3
#
# Copyright (c) 2020, Galois, Inc.
#
# All Rights Reserved
#
# This material is based upon work supported by the Defense Advanced Research
# Projects Agency (DARPA) under Contract No. FA8750-20-C-0203.
#
# Any opinions, findings and conclusions or recommendations expressed in this
# material are those of the author(s) and do not necessarily reflect the views
# of the Defense Advanced Research Projects Agency (DARPA).

import argparse
import logging
import sys
from pathlib import Path

import semtk

from custom_formatter import stream_handler
from ontology_changes.ontology_change import LOGGER_ID, stylize_file_name
from rack.commits import commits_in_chronological_order


logger = logging.getLogger(LOGGER_ID)
logger.addHandler(stream_handler)
logger.propagate = False

parser = argparse.ArgumentParser()

parser.add_argument(
    "--from-folder",
    help="Folder of JSON files to migrate",
    type=str,
)

parser.add_argument(
    "--list-changes-only",
    help="Have the tool only list changes in a human-readable format",
    action="store_true",
)

parser.add_argument(
    "--log-level",
    help="Assign logger severity level",
    type=str,
    default="INFO",
)

parser.add_argument(
    "--to-folder",
    help="Folder to output the migrated JSON files",
    type=str,
)

args = parser.parse_args()

try:
    logging.basicConfig(level=args.log_level)
except ValueError:
    logger.error("Bad log level specified")
    sys.exit(1)

if args.list_changes_only:
    for commit in commits_in_chronological_order:
        commit_number = commit.number
        print(f"Commit {commit_number} https://github.com/ge-high-assurance/RACK/commit/{commit_number}")
        for change in commit.changes:
            print(f"  {change.text_description()}")
    sys.exit(0)

to_folder = Path(args.to_folder)

if not args.from_folder:
    print("from_folder argument missing, quitting.")
from_folder = Path(args.from_folder)
if not Path.exists(from_folder):
    print("from_folder does not exist, quitting.")
    sys.exit(1)

if not args.to_folder:
    print("to_folder argument missing, quitting.")
if not Path.exists(to_folder):
    print("to_folder does not exist, quitting.")
    sys.exit(1)

for json_file_path in from_folder.glob("*.json"):
    input_file = f"{from_folder}/{json_file_path.name}"
    output_file = f"{to_folder}/{json_file_path.name}"
    logger.info(
        f" Migrating from {stylize_file_name(input_file)} to {stylize_file_name(output_file)}"
    )
    with open(json_file_path) as json_file:
        my_json = semtk.SemTKJSON.parse_raw(json_file.read())
        for commit in commits_in_chronological_order:
            commit_number = commit.number
            logger.debug(f"Processing commit {commit_number}")
            for change in commit.changes:
                change.migrate_json(my_json)
        with open(f"{to_folder}/{json_file_path.name}", mode="w") as out_file:
            out_file.write(my_json.json(exclude_unset=True, indent=4))
